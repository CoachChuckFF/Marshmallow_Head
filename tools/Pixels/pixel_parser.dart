import 'dart:async';
import 'dart:convert';
import 'dart:io';


Directory imgDir = new Directory('./img');
Directory genDir = new Directory('./gen');

final int fps = 21;
final int rows = 12;
final int cols = 50;
final List<PixelAnimation> animations = List<PixelAnimation>();

void writeOutFile(File file, String contents){

}

PixelFrame parseRawFile(File file){
  PixelFrame frame = PixelFrame();
  int c = 0, x = 0, y = 0, r = 0, g = 0, b = 0;

  /* Setup Frame */
  String path = file.path;
  String filename = path.split("/").last;
  List<String> ni = filename.split("_");
  frame.name = ni[0];
  frame.index = int.parse(ni[1]);
  frame.rows = int.parse(ni[2]);
  frame.cols = int.parse(ni[3].split(".").first);

  /* Read N Parse */
  List<int> data = file.readAsBytesSync();

  for(int i = 0; i < data.length; i++){
    switch(c++){
      case 0:
        r = data[i];
      break;
      case 1:
        g = data[i];
      break;
      case 2:
        c = 0;
        b = data[i];
        frame.pixels.add(Pixel(
          r,
          g,
          b,
        ));
      break;
    }
  }

  return frame;
}

void main() {
  print("Welcome to Pixel Parser!");

  imgDir.listSync().forEach((entity){
    print(entity.path);
    if(entity is File){
      PixelFrame frame = parseRawFile(entity);
      
      PixelAnimation animation = animations.firstWhere((ani){
        return ani.name == frame.name;
      }, orElse: (){return null;});

      if(animation == null){
        animations.add(PixelAnimation(
          frame.name,
          List<PixelFrame>()..add(frame),
          fps
        ));
      } else {
        animation.frames.add(frame);
      }

    }
    print("Parsed");
  });

  animations.forEach((animation){
    String contents = "";
    File file = new File("${genDir.path}/pixel_${animation.name}.h");

    contents += "/* Copyright (C) Blizzard Lighting LLC. - All Rights Reserved\n";
    contents += " * Unauthorized copying of this file, via any medium is strictly prohibited\n";
    contents += " * Proprietary and confidential\n";
    contents += " * Auto Generated by Christian Krueger <christian@blizzardlighting.com> ${new DateTime.now()}\n";
    contents += " * Pixel Gen -> pixel_${animation.name}.h\n";
    contents += " */\n\n";

    contents += "#ifndef PIXEL_${animation.name.toUpperCase()}_H\n";
    contents += "#define PIXEL_${animation.name.toUpperCase()}_H\n\n";

    contents += "#include <inttypes.h>\n\n";
    contents += "#ifdef __cplusplus\n";
    contents += 'extern "C" {\n';
    contents += "#endif\n\n";

    contents += "#define PIXEL_${animation.name.toUpperCase()}_FRAME_COUNT (${animation.frames.length})\n";
    contents += "#define PIXEL_${animation.name.toUpperCase()}_ROWS (${animation.frames.first.rows})\n";
    contents += "#define PIXEL_${animation.name.toUpperCase()}_COLS (${animation.frames.first.cols})\n\n";

    contents += "uint8_t Pixel${animation.name.substring(0,1).toUpperCase()}${animation.name.substring(1).toLowerCase()}[${animation.frames.length}][${animation.frames.first.cols}][${animation.frames.first.rows}][3] = {\n";

    animation.frames.forEach((frame){
      contents += "\t{\n";
      for(int i = 0; i < frame.cols; i++){
        contents += "\t\t{\n\t\t\t";
        for(int j = 0; j < frame.rows; j++){
          int k = (j * frame.cols) + i;
          contents += "{${frame.pixels[k].r}, ${frame.pixels[k].g}, ${frame.pixels[k].b}},";
        }
        contents += "\n\t\t},\n";
      }
      contents += "\t},\n";
    });

    contents += "};\n\n";

    contents += "#ifdef __cplusplus\n";
    contents += '}\n';
    contents += "#endif\n\n";
    contents += "#endif\n";

    file.writeAsStringSync(contents);
  });
}

class PixelAnimation{
  String name;
  int rows, cols;
  int fps;
  List<PixelFrame> frames;

  PixelAnimation(this.name, this.frames, this.fps);
}

class PixelFrame{
  int index, rows, cols;
  String name;
  List<Pixel> pixels;

  PixelFrame({this.name, this.index = 0, this.pixels, this.rows = 54, this.cols = 12}){
    if(this.pixels == null){
      this.pixels = List<Pixel>();
    }
  }
}

class Pixel{

  final int r;
  final int g; 
  final int b;

  Pixel(this.r, this.g, this.b);
}